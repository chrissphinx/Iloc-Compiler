/* Generated By:JavaCC: Do not edit this line. IlocParserConstants.java */
package edu.wmich.cs.maccreery.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface IlocParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT = 5;
  /** RegularExpression Id. */
  int ADD = 6;
  /** RegularExpression Id. */
  int ADDI = 7;
  /** RegularExpression Id. */
  int AND = 8;
  /** RegularExpression Id. */
  int ANDI = 9;
  /** RegularExpression Id. */
  int C2C = 10;
  /** RegularExpression Id. */
  int C2I = 11;
  /** RegularExpression Id. */
  int CALL = 12;
  /** RegularExpression Id. */
  int CBR = 13;
  /** RegularExpression Id. */
  int CBRNE = 14;
  /** RegularExpression Id. */
  int CBR_LT = 15;
  /** RegularExpression Id. */
  int CBR_LE = 16;
  /** RegularExpression Id. */
  int CBR_EQ = 17;
  /** RegularExpression Id. */
  int CBR_NE = 18;
  /** RegularExpression Id. */
  int CBR_GT = 19;
  /** RegularExpression Id. */
  int CBR_GE = 20;
  /** RegularExpression Id. */
  int CLOADAI = 21;
  /** RegularExpression Id. */
  int CLOADAO = 22;
  /** RegularExpression Id. */
  int CLOAD = 23;
  /** RegularExpression Id. */
  int CMP_LT = 24;
  /** RegularExpression Id. */
  int CMP_LE = 25;
  /** RegularExpression Id. */
  int CMP_EQ = 26;
  /** RegularExpression Id. */
  int CMP_NE = 27;
  /** RegularExpression Id. */
  int CMP_GT = 28;
  /** RegularExpression Id. */
  int CMP_GE = 29;
  /** RegularExpression Id. */
  int COMP = 30;
  /** RegularExpression Id. */
  int CREAD = 31;
  /** RegularExpression Id. */
  int CSTOREAI = 32;
  /** RegularExpression Id. */
  int CSTOREAO = 33;
  /** RegularExpression Id. */
  int CSTORE = 34;
  /** RegularExpression Id. */
  int CWRITE = 35;
  /** RegularExpression Id. */
  int DATA = 36;
  /** RegularExpression Id. */
  int DIVI = 37;
  /** RegularExpression Id. */
  int DIV = 38;
  /** RegularExpression Id. */
  int F2F = 39;
  /** RegularExpression Id. */
  int F2I = 40;
  /** RegularExpression Id. */
  int FADD = 41;
  /** RegularExpression Id. */
  int FCALL = 42;
  /** RegularExpression Id. */
  int FCOMP = 43;
  /** RegularExpression Id. */
  int FCMP_LT = 44;
  /** RegularExpression Id. */
  int FCMP_LE = 45;
  /** RegularExpression Id. */
  int FCMP_EQ = 46;
  /** RegularExpression Id. */
  int FCMP_NE = 47;
  /** RegularExpression Id. */
  int FCMP_GT = 48;
  /** RegularExpression Id. */
  int FCMP_GE = 49;
  /** RegularExpression Id. */
  int FDIV = 50;
  /** RegularExpression Id. */
  int FLOADAI = 51;
  /** RegularExpression Id. */
  int FLOADAO = 52;
  /** RegularExpression Id. */
  int FLOAD = 53;
  /** RegularExpression Id. */
  int FLOAT = 54;
  /** RegularExpression Id. */
  int FMULT = 55;
  /** RegularExpression Id. */
  int FRAME = 56;
  /** RegularExpression Id. */
  int FREAD = 57;
  /** RegularExpression Id. */
  int FRET = 58;
  /** RegularExpression Id. */
  int FWRITE = 59;
  /** RegularExpression Id. */
  int FSTOREAI = 60;
  /** RegularExpression Id. */
  int FSTOREAO = 61;
  /** RegularExpression Id. */
  int FSTORE = 62;
  /** RegularExpression Id. */
  int FSUB = 63;
  /** RegularExpression Id. */
  int GLOBAL = 64;
  /** RegularExpression Id. */
  int I2F = 65;
  /** RegularExpression Id. */
  int I2I = 66;
  /** RegularExpression Id. */
  int ICALL = 67;
  /** RegularExpression Id. */
  int IREAD = 68;
  /** RegularExpression Id. */
  int IRET = 69;
  /** RegularExpression Id. */
  int IWRITE = 70;
  /** RegularExpression Id. */
  int JUMPI = 71;
  /** RegularExpression Id. */
  int JUMP = 72;
  /** RegularExpression Id. */
  int LOADAI = 73;
  /** RegularExpression Id. */
  int LOADAO = 74;
  /** RegularExpression Id. */
  int LOAD = 75;
  /** RegularExpression Id. */
  int LOADI = 76;
  /** RegularExpression Id. */
  int LSHIFTI = 77;
  /** RegularExpression Id. */
  int LSHIFT = 78;
  /** RegularExpression Id. */
  int MALLOC = 79;
  /** RegularExpression Id. */
  int MOD = 80;
  /** RegularExpression Id. */
  int MULTI = 81;
  /** RegularExpression Id. */
  int MULT = 82;
  /** RegularExpression Id. */
  int NOP = 83;
  /** RegularExpression Id. */
  int NOT = 84;
  /** RegularExpression Id. */
  int OR = 85;
  /** RegularExpression Id. */
  int ORI = 86;
  /** RegularExpression Id. */
  int RSHIFTI = 87;
  /** RegularExpression Id. */
  int RSHIFT = 88;
  /** RegularExpression Id. */
  int RET = 89;
  /** RegularExpression Id. */
  int STOREAI = 90;
  /** RegularExpression Id. */
  int STOREAO = 91;
  /** RegularExpression Id. */
  int STORE = 92;
  /** RegularExpression Id. */
  int STRING = 93;
  /** RegularExpression Id. */
  int SUBI = 94;
  /** RegularExpression Id. */
  int SUB = 95;
  /** RegularExpression Id. */
  int SWRITE = 96;
  /** RegularExpression Id. */
  int TBL = 97;
  /** RegularExpression Id. */
  int TESTEQ = 98;
  /** RegularExpression Id. */
  int TESTGE = 99;
  /** RegularExpression Id. */
  int TESTGT = 100;
  /** RegularExpression Id. */
  int TESTLE = 101;
  /** RegularExpression Id. */
  int TESTLT = 102;
  /** RegularExpression Id. */
  int TESTNE = 103;
  /** RegularExpression Id. */
  int TEXT = 104;
  /** RegularExpression Id. */
  int XOR = 105;
  /** RegularExpression Id. */
  int XORI = 106;
  /** RegularExpression Id. */
  int ASSIGN = 107;
  /** RegularExpression Id. */
  int ARROW = 108;
  /** RegularExpression Id. */
  int COLON = 109;
  /** RegularExpression Id. */
  int SEMICOLON = 110;
  /** RegularExpression Id. */
  int LBRACKET = 111;
  /** RegularExpression Id. */
  int RBRACKET = 112;
  /** RegularExpression Id. */
  int COMMA = 113;
  /** RegularExpression Id. */
  int VR = 114;
  /** RegularExpression Id. */
  int STRING_CONST = 115;
  /** RegularExpression Id. */
  int LABEL = 116;
  /** RegularExpression Id. */
  int INITIAL = 117;
  /** RegularExpression Id. */
  int DOT = 118;
  /** RegularExpression Id. */
  int DIGIT = 119;
  /** RegularExpression Id. */
  int ALPHA = 120;
  /** RegularExpression Id. */
  int UNDERSCORE = 121;
  /** RegularExpression Id. */
  int FLOAT_CONST = 122;
  /** RegularExpression Id. */
  int NUMBER = 123;
  /** RegularExpression Id. */
  int EXPONENT = 124;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<COMMENT>",
    "\"add\"",
    "\"addI\"",
    "\"and\"",
    "\"andI\"",
    "\"c2c\"",
    "\"c2i\"",
    "\"call\"",
    "\"cbr\"",
    "\"cbrne\"",
    "\"cbr_LT\"",
    "\"cbr_LE\"",
    "\"cbr_EQ\"",
    "\"cbr_NE\"",
    "\"cbr_GT\"",
    "\"cbr_GE\"",
    "\"cloadAI\"",
    "\"cloadAO\"",
    "\"cload\"",
    "\"cmp_LT\"",
    "\"cmp_LE\"",
    "\"cmp_EQ\"",
    "\"cmp_NE\"",
    "\"cmp_GT\"",
    "\"cmp_GE\"",
    "\"comp\"",
    "\"cread\"",
    "\"cstoreAI\"",
    "\"cstoreAO\"",
    "\"cstore\"",
    "\"cwrite\"",
    "\".data\"",
    "\"divI\"",
    "\"div\"",
    "\"f2f\"",
    "\"f2i\"",
    "\"fadd\"",
    "\"fcall\"",
    "\"fcomp\"",
    "\"fcmp_LT\"",
    "\"fcmp_LE\"",
    "\"fcmp_EQ\"",
    "\"fcmp_NE\"",
    "\"fcmp_GT\"",
    "\"fcmp_GE\"",
    "\"fdiv\"",
    "\"floadAI\"",
    "\"floadAO\"",
    "\"fload\"",
    "\".float\"",
    "\"fmult\"",
    "\".frame\"",
    "\"fread\"",
    "\"fret\"",
    "\"fwrite\"",
    "\"fstoreAI\"",
    "\"fstoreAO\"",
    "\"fstore\"",
    "\"fsub\"",
    "\".global\"",
    "\"i2f\"",
    "\"i2i\"",
    "\"icall\"",
    "\"iread\"",
    "\"iret\"",
    "\"iwrite\"",
    "\"jumpI\"",
    "\"jump\"",
    "\"loadAI\"",
    "\"loadAO\"",
    "\"load\"",
    "\"loadI\"",
    "\"lshiftI\"",
    "\"lshift\"",
    "\"malloc\"",
    "\"mod\"",
    "\"multI\"",
    "\"mult\"",
    "\"nop\"",
    "\"not\"",
    "\"or\"",
    "\"orI\"",
    "\"rshiftI\"",
    "\"rshift\"",
    "\"ret\"",
    "\"storeAI\"",
    "\"storeAO\"",
    "\"store\"",
    "\".string\"",
    "\"subI\"",
    "\"sub\"",
    "\"swrite\"",
    "\"tbl\"",
    "\"testeq\"",
    "\"testge\"",
    "\"testgt\"",
    "\"testle\"",
    "\"testlt\"",
    "\"testne\"",
    "\".text\"",
    "\"xor\"",
    "\"xorI\"",
    "\"=>\"",
    "\"->\"",
    "\":\"",
    "\";\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "<VR>",
    "<STRING_CONST>",
    "<LABEL>",
    "<INITIAL>",
    "\".\"",
    "<DIGIT>",
    "<ALPHA>",
    "\"_\"",
    "<FLOAT_CONST>",
    "<NUMBER>",
    "<EXPONENT>",
  };

}
