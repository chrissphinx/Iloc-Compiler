/* IlocParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. IlocParserTokenManager.java */
package edu.wmich.cs.maccreery.parser;
import java.util.Vector;
import edu.wmich.cs.maccreery.ast.*;

/** Token Manager. */
@SuppressWarnings("unused")public class IlocParserTokenManager implements IlocParserConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x100000000000L) != 0L)
            return 25;
         if ((active0 & 0x140001000000000L) != 0L || (active1 & 0x10020000001L) != 0L)
            return 30;
         if ((active0 & 0xfebfffefffffffc0L) != 0L || (active1 & 0x6ffdffffffeL) != 0L)
         {
            jjmatchedKind = 116;
            return 14;
         }
         return -1;
      case 1:
         if ((active1 & 0x600000L) != 0L)
            return 14;
         if ((active0 & 0xffffffffffffffc0L) != 0L || (active1 & 0x7ffff9fffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 1;
            }
            return 14;
         }
         return -1;
      case 2:
         if ((active0 & 0x1e0001fefc0L) != 0L || (active1 & 0x602c2590006L) != 0L)
            return 14;
         if ((active0 & 0xfffffe1fffe01000L) != 0L || (active1 & 0x1fd3d86fff9L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 2;
            }
            return 14;
         }
         return -1;
      case 3:
         if ((active0 & 0x8404022040001280L) != 0L || (active1 & 0x40040061fa0L) != 0L)
            return 14;
         if ((active0 & 0x7bfbfc1fbfffc000L) != 0L || (active1 & 0x1fd3d80e059L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 3;
            }
            return 14;
         }
         return -1;
      case 4:
         if ((active0 & 0x2b80c1080e04000L) != 0L || (active1 & 0x1001c021098L) != 0L)
            return 14;
         if ((active0 & 0x7943f00f3f1f8000L) != 0L || (active1 & 0xfd2180e641L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 4;
            }
            return 14;
         }
         return -1;
      case 5:
         if ((active0 & 0x7940000f3f1f8000L) != 0L || (active1 & 0xfd0180e640L) != 0L)
            return 14;
         if ((active0 & 0x1bf00000600000L) != 0L || (active1 & 0x2c000001L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 5;
            }
            return 14;
         }
         return -1;
      case 6:
         if ((active0 & 0x3000000300000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 6;
            return 14;
         }
         if ((active0 & 0x1bf00000600000L) != 0L || (active1 & 0x2c802001L) != 0L)
            return 14;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 113);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x140001000000000L, 0x10020000001L);
      case 58:
         return jjStopAtPos(0, 109);
      case 59:
         return jjStopAtPos(0, 110);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L);
      case 91:
         return jjStopAtPos(0, 111);
      case 93:
         return jjStopAtPos(0, 112);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3c0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xffffffc00L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x6000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xfebfff8000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7eL);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7e00L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x78000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3800000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1dc000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfe00000000L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x60000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000c00L, active1, 0x6L);
      case 62:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000001000L, active1, 0x8000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x1fe000L, active1, 0x200000000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x3fc0000000000L, active1, 0x8L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x40010000000c0L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xfc02000000L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x140000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x38000000e00000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000003f000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x300L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0x60000191e00L);
      case 114:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x600000080000000L, active1, 0x400030L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0xf000000700000000L, active1, 0x21806000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1001c000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc0060180L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000800000000L, active1, 0x100000040L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 73:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 14);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x41000000000L, active1, 0x1e08L);
      case 98:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000L);
      case 99:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 14);
         break;
      case 100:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 80, 14);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000280L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000080000000L, active1, 0x10000000030L);
      case 102:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 14);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 14);
         break;
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1806000L);
      case 105:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 14);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 14);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 14);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 108:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 97, 14);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000001000L, active1, 0x68001L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x3f00040000000L, active1, 0x180L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x38080000e00000L, active1, 0x1c000000L);
      case 112:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 83, 14);
         return jjMoveStringLiteralDfa3_0(active0, 0x3f000000L, active1, 0L);
      case 114:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x9000008001fc000L, active1, 0x40100000040L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xfc00000000L);
      case 116:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 84, 14);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 89, 14);
         return jjMoveStringLiteralDfa3_0(active0, 0x7000000700000000L, active1, 0x20000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8080000000000000L, active1, 0L);
      case 118:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 73:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 14);
         else if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 14);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 14);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 94, 14);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 106, 14);
         break;
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x3f1f8000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x338000080e00000L, active1, 0x10L);
      case 98:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 14);
         break;
      case 100:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 14);
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1600L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000800000000L, active1, 0x101806040L);
      case 108:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 14);
         return jjMoveStringLiteralDfa4_0(active0, 0x80040000000000L, active1, 0x8008L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x7040000700000000L, active1, 0x1L);
      case 112:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 14);
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x3f00000000000L, active1, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3c000000L);
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 14);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 14);
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0xfc00020000L);
      case 118:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 14);
         break;
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x600L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x4020000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x30180000L, active1, 0L);
      case 73:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 14);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 14);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 14);
         break;
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x3018000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x8040000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x3f00000000000L, active1, 0L);
      case 97:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 14);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L);
      case 100:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 14);
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 14);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 14);
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000600000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 14);
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40c000000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1806000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1800000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000L);
      case 108:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 14);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 14);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x6000000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000L);
      case 112:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 14);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x7000000700000000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 14);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 14);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000800000000L, active1, 0x100000040L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x18000000600000L, active1, 0xc000000L);
      case 69:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 14);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 14);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 14);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 14);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 14);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 14);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa6_0(active0, 0x3000000000000L, active1, 0L);
      case 73:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 14);
         break;
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x300000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 79:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 14);
         break;
      case 81:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 14);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 14);
         break;
      case 84:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 14);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 14);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 14);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 14);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      case 99:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 14);
         break;
      case 101:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 14);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 14);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 14);
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 14);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 14);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 14);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 14);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 103, 14);
         return jjMoveStringLiteralDfa6_0(active0, 0x3000000300000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000L);
      case 113:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 14);
         break;
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 14);
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 100, 14);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 14);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x802000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x3000000300000000L, active1, 0L);
      case 69:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 14);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 14);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 14);
         break;
      case 73:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 14);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 14);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 77, 14);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 87, 14);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 90, 14);
         break;
      case 79:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 14);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 14);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 14);
         break;
      case 81:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 14);
         break;
      case 84:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 14);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 14);
         break;
      case 103:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 93, 14);
         break;
      case 108:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 73:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 14);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 14);
         break;
      case 79:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 14);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 61, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 30;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 30:
               case 12:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 25:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     { jjCheckNAdd(28); }
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     { jjCheckNAddStates(3, 6); }
                  }
                  else if (curChar == 45)
                     { jjAddStates(7, 8); }
                  else if (curChar == 48)
                  {
                     if (kind > 123)
                        kind = 123;
                     { jjCheckNAddTwoStates(16, 21); }
                  }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(12, 13); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(10, 11); }
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 35)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjCheckNAdd(1); }
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if (curChar == 48 && kind > 114)
                     kind = 114;
                  break;
               case 4:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  { jjCheckNAdd(6); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  { jjCheckNAdd(6); }
                  break;
               case 8:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 10:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 11:
                  if (curChar == 34 && kind > 115)
                     kind = 115;
                  break;
               case 14:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if (curChar != 48)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAddTwoStates(16, 21); }
                  break;
               case 16:
                  if (curChar == 46)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 19:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(20); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  { jjCheckNAdd(20); }
                  break;
               case 22:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(23); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  { jjCheckNAdd(23); }
                  break;
               case 24:
                  if (curChar == 45)
                     { jjAddStates(7, 8); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 27:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAdd(28); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAdd(28); }
                  break;
               case 29:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAddStates(3, 6); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 30:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAdd(14); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAdd(14); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 1:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 114)
                     { jjAddStates(9, 11); }
                  break;
               case 7:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 10:
                  { jjAddStates(12, 13); }
                  break;
               case 12:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  { jjCheckNAdd(14); }
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  { jjCheckNAdd(14); }
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(14, 15); }
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(16, 17); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(12, 13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 30 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   26, 16, 21, 26, 16, 21, 28, 25, 27, 3, 4, 5, 10, 11, 19, 20, 
   22, 23, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\141\144\144", "\141\144\144\111", 
"\141\156\144", "\141\156\144\111", "\143\62\143", "\143\62\151", "\143\141\154\154", 
"\143\142\162", "\143\142\162\156\145", "\143\142\162\137\114\124", 
"\143\142\162\137\114\105", "\143\142\162\137\105\121", "\143\142\162\137\116\105", 
"\143\142\162\137\107\124", "\143\142\162\137\107\105", "\143\154\157\141\144\101\111", 
"\143\154\157\141\144\101\117", "\143\154\157\141\144", "\143\155\160\137\114\124", 
"\143\155\160\137\114\105", "\143\155\160\137\105\121", "\143\155\160\137\116\105", 
"\143\155\160\137\107\124", "\143\155\160\137\107\105", "\143\157\155\160", "\143\162\145\141\144", 
"\143\163\164\157\162\145\101\111", "\143\163\164\157\162\145\101\117", "\143\163\164\157\162\145", 
"\143\167\162\151\164\145", "\56\144\141\164\141", "\144\151\166\111", "\144\151\166", "\146\62\146", 
"\146\62\151", "\146\141\144\144", "\146\143\141\154\154", "\146\143\157\155\160", 
"\146\143\155\160\137\114\124", "\146\143\155\160\137\114\105", "\146\143\155\160\137\105\121", 
"\146\143\155\160\137\116\105", "\146\143\155\160\137\107\124", "\146\143\155\160\137\107\105", 
"\146\144\151\166", "\146\154\157\141\144\101\111", "\146\154\157\141\144\101\117", 
"\146\154\157\141\144", "\56\146\154\157\141\164", "\146\155\165\154\164", "\56\146\162\141\155\145", 
"\146\162\145\141\144", "\146\162\145\164", "\146\167\162\151\164\145", 
"\146\163\164\157\162\145\101\111", "\146\163\164\157\162\145\101\117", "\146\163\164\157\162\145", 
"\146\163\165\142", "\56\147\154\157\142\141\154", "\151\62\146", "\151\62\151", 
"\151\143\141\154\154", "\151\162\145\141\144", "\151\162\145\164", "\151\167\162\151\164\145", 
"\152\165\155\160\111", "\152\165\155\160", "\154\157\141\144\101\111", "\154\157\141\144\101\117", 
"\154\157\141\144", "\154\157\141\144\111", "\154\163\150\151\146\164\111", 
"\154\163\150\151\146\164", "\155\141\154\154\157\143", "\155\157\144", "\155\165\154\164\111", 
"\155\165\154\164", "\156\157\160", "\156\157\164", "\157\162", "\157\162\111", 
"\162\163\150\151\146\164\111", "\162\163\150\151\146\164", "\162\145\164", "\163\164\157\162\145\101\111", 
"\163\164\157\162\145\101\117", "\163\164\157\162\145", "\56\163\164\162\151\156\147", "\163\165\142\111", 
"\163\165\142", "\163\167\162\151\164\145", "\164\142\154", "\164\145\163\164\145\161", 
"\164\145\163\164\147\145", "\164\145\163\164\147\164", "\164\145\163\164\154\145", 
"\164\145\163\164\154\164", "\164\145\163\164\156\145", "\56\164\145\170\164", "\170\157\162", 
"\170\157\162\111", "\75\76", "\55\76", "\72", "\73", "\133", "\135", "\54", null, null, null, 
null, null, null, null, null, null, null, null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public IlocParserTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public IlocParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 30; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0xc1fffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[30];
    static private final int[] jjstateSet = new int[2 * 30];

    
    static protected char curChar;
}
